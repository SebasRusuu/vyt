x-postgres-common:
  &postgres-common
  image: postgres:14-alpine
  user: postgres
  restart: always
  healthcheck:
    test: 'pg_isready -U postgres --dbname=vytdb'
    interval: 10s
    timeout: 5s
    retries: 5

services:
  ai_service:
    build:
      context: ./ai
      dockerfile: Dockerfile
    container_name: aiservice
    ports:
      - "5001:5001"
    networks:
      - app_net
    volumes:
      - ./ai/models:/app/models
      - ./ai/test_api.py:/app/test_api.py



  postgres_primary:
    <<: *postgres-common
    build:
      context: .
      dockerfile: data/Dockerfile
    container_name: DB_MASTER
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: vytdb
      POSTGRES_PASSWORD: foobar
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres
      -c wal_level=logical
      -c hot_standby=on
      -c max_wal_senders=10
      -c max_replication_slots=10
      -c shared_preload_libraries=pglogical
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./00_init.sql:/docker-entrypoint-initdb.d/00_init.sql
      - ./data/sql/database.sql:/docker-entrypoint-initdb.d/database.sql
    networks:
      - app_net

  postgres_replica:
    <<: *postgres-common
    build:
      context: .
      dockerfile: data/Dockerfile
    container_name: DB_REPLICA
    ports:
      - 5433:5432
    environment:
      PGUSER: replicator
      PGPASSWORD: replicator_password
    command: |
      bash -c "
      if [ -z \"$(ls -A /var/lib/postgresql/data)\" ]; then
        until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=DB_MASTER --port=5432 --username=replicator --progress
        do
          echo 'Waiting for primary to connect...'
          sleep 1s
        done
        echo 'Backup done, starting replica...'
      else
        echo 'Data directory is not empty, starting replica...'
      fi
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    volumes:
      - pg_slave_data:/var/lib/postgresql/data
    depends_on:
      postgres_primary:
        condition: service_healthy
    networks:
      - app_net

  monitor:
    image: alpine:latest
    container_name: monitor
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./monitor.sh:/monitor.sh
    command: [ "sh", "-c", "apk add --no-cache docker-cli postgresql-client && sh /monitor.sh" ]
    depends_on:
      - postgres_primary
      - postgres_replica
    networks:
      - app_net

  web-1:
    build:
      context: ./web
    container_name: web_1
    ports:
      - "3001:3000"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://DB_MASTER:5432/vytdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: foobar
    depends_on:
      - backend
    networks:
      - app_net

  web-2:
    build:
      context: ./web
    container_name: web_2
    ports:
      - "3002:3000"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://DB_MASTER:5432/vytdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: foobar
    depends_on:
      - backend
    networks:
      - app_net

  backend:
    build:
      context: ./server
    container_name: backend
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://DB_MASTER:5432/vytdb
      SPRING_DATASOURCE_REPLICA_URL: jdbc:postgresql://DB_REPLICA:5432/vytdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: foobar
      AI_SERVICE_URL: http://aiservice:5001
    env_file:
      - ./server/.env
    volumes:
      - ./server/.env:/server/.env:ro
    depends_on:
      - postgres_primary
    networks:
      - app_net

  backend-2:
    build:
      context: ./server
    container_name: backend-2
    ports:
      - "8081:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://DB_MASTER:5432/vytdb
      SPRING_DATASOURCE_REPLICA_URL: jdbc:postgresql://DB_REPLICA:5432/vytdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: foobar
      AI_SERVICE_URL: http://aiservice:5001
    env_file:
      - ./server/.env
    volumes:
      - ./server/.env:/server/.env:ro
    depends_on:
      postgres_primary:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app_net

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/html:/usr/share/nginx/html
    depends_on:
      - web-1
      - web-2
      - backend
      - backend-2
      - postgres_replica
    networks:
      - app_net

volumes:
  postgres_data:
    name: postgres_data
  pg_slave_data:
    name: pg_slave_data
  nginx_data:
    name: nginx_data

networks:
  app_net:
    name: app_net
    driver: bridge
